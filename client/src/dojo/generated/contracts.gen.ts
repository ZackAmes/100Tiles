
// Generated by dojo-bindgen on Fri, 26 Jul 2024 01:48:12 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { Account, byteArray } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import * as models from "./models.gen";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `ok-actions` contract
    function actions() {
        const contract_name = "actions";

        
        // Call the `spawn` system with the specified Account and calldata
        const spawn = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "spawn",
                        calldata: []
                    },
                    'ok'
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `move` system with the specified Account and calldata
        const move = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    contract_name,
                    "move",
                    [],
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `create_game` system with the specified Account and calldata
        const create_game = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    contract_name,
                    "create_game",
                    [],
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `join_game` system with the specified Account and calldata
        const join_game = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    contract_name,
                    "join_game",
                    [props.game_id],
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `start_game` system with the specified Account and calldata
        const start_game = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    contract_name,
                    "start_game",
                    [props.game_id],
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    contract_name,
                    "world",
                    [],
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            spawn, move, create_game, join_game, start_game, world
        };
    }

    return {
        actions: actions()
    };
}
