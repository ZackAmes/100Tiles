
// Generated by dojo-bindgen on Sat, 17 Aug 2024 23:19:44 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;



// Type definition for `dojo::model::layout::Layout` enum
export type Layout = { type: 'Fixed'; value: RecsType.NumberArray; } | { type: 'Struct'; value: RecsType.StringArray; } | { type: 'Tuple'; value: RecsType.StringArray; } | { type: 'Array'; value: RecsType.StringArray; } | { type: 'ByteArray'; } | { type: 'Enum'; value: RecsType.StringArray; };

export const LayoutDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
    selector: BigInt;
    layout: Layout;
    
}
export const FieldLayoutDefinition = {
    selector: RecsType.BigInt,
    layout: LayoutDefinition,
    
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: String[];
    pending_word: BigInt;
    pending_word_len: Number;
    
}
export const ByteArrayDefinition = {
    data: RecsType.StringArray,
    pending_word: RecsType.BigInt,
    pending_word_len: RecsType.Number,
    
};

// Type definition for `dojo_starter::models::position::Position` struct
export interface Position {
    game_id: Number;
    player: BigInt;
    tile: Number;
    
}
export const PositionDefinition = {
    game_id: RecsType.Number,
    player: RecsType.BigInt,
    tile: RecsType.Number,
    
};


// Type definition for `dojo_starter::models::effect::Target` enum
export type Target = { type: 'None'; } | { type: 'Landing'; } | { type: 'Player'; value: RecsType.BigInt; };

export const TargetDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `dojo_starter::models::effect::Effect` enum
export type Effect = { type: 'None'; } | { type: 'Forward'; value: tuple; } | { type: 'Backward'; value: tuple; } | { type: 'Stun'; value: tuple; };

export const EffectDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `dojo_starter::models::position::Tile` struct
export interface Tile {
    game_id: Number;
    number: Number;
    effect: Effect;
    
}
export const TileDefinition = {
    game_id: RecsType.Number,
    number: RecsType.Number,
    effect: EffectDefinition,
    
};


// Type definition for `dojo_starter::models::global::Global` struct
export interface Global {
    global_key: Number;
    pending_games: Number[];
    
}
export const GlobalDefinition = {
    global_key: RecsType.Number,
    pending_games: RecsType.NumberArray,
    
};


// Type definition for `dojo_starter::models::position::Pending` struct
export interface Pending {
    game_id: Number;
    player: BigInt;
    effect: Effect;
    
}
export const PendingDefinition = {
    game_id: RecsType.Number,
    player: RecsType.BigInt,
    effect: EffectDefinition,
    
};


// Type definition for `dojo_starter::models::game::Status` enum
export type Status = { type: 'Pending'; } | { type: 'Active'; } | { type: 'Completed'; };

export const StatusDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `dojo_starter::models::game::TurnPhase` enum
export type TurnPhase = { type: 'Standby'; } | { type: 'Resolving'; } | { type: 'End'; };

export const TurnPhaseDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `dojo_starter::models::game::Game` struct
export interface Game {
    game_id: Number;
    players: BigInt[];
    tile_length: Number;
    turn_player: BigInt;
    status: Status;
    phase: TurnPhase;
    
}
export const GameDefinition = {
    game_id: RecsType.Number,
    players: RecsType.BigIntArray,
    tile_length: RecsType.Number,
    turn_player: RecsType.BigInt,
    status: StatusDefinition,
    phase: TurnPhaseDefinition,
    
};


// Type definition for `dojo_starter::systems::actions::actions::Moved` struct
export interface Moved {
    player: BigInt;
    amt: Number;
    
}
export const MovedDefinition = {
    player: RecsType.BigInt,
    amt: RecsType.Number,
    
};


// Type definition for `dojo_starter::models::player::Player` struct
export interface Player {
    address: BigInt;
    games: Number[];
    
}
export const PlayerDefinition = {
    address: RecsType.BigInt,
    games: RecsType.NumberArray,
    
};


export function defineContractComponents(world: World) {
    return {

        // Model definition for `dojo_starter::models::position::Position` model
        Position: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    player: RecsType.BigInt,
                    tile: RecsType.Number,
                },
                {
                    metadata: {
                        name: "ok-Position",
                        types: ["u32", "ContractAddress", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `dojo_starter::models::position::Tile` model
        Tile: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    number: RecsType.Number,
                    effect: RecsType.String,
                },
                {
                    metadata: {
                        name: "ok-Tile",
                        types: ["u32", "u8", "Effect"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `dojo_starter::models::global::Global` model
        Global: (() => {
            return defineComponent(
                world,
                {
                    global_key: RecsType.Number,
                    pending_games: RecsType.NumberArray,
                },
                {
                    metadata: {
                        name: "ok-Global",
                        types: ["u8", "array"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `dojo_starter::models::position::Pending` model
        Pending: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    player: RecsType.BigInt,
                    effect: RecsType.String,
                },
                {
                    metadata: {
                        name: "ok-Pending",
                        types: ["u32", "ContractAddress", "Effect"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `dojo_starter::models::game::Game` model
        Game: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    players: RecsType.BigIntArray,
                    tile_length: RecsType.Number,
                    turn_player: RecsType.BigInt,
                    status: RecsType.String,
                    phase: RecsType.String,
                },
                {
                    metadata: {
                        name: "ok-Game",
                        types: ["u32", "array", "u8", "ContractAddress", "Status", "TurnPhase"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `dojo_starter::systems::actions::actions::Moved` model
        Moved: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    amt: RecsType.Number,
                },
                {
                    metadata: {
                        name: "ok-Moved",
                        types: ["ContractAddress", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `dojo_starter::models::player::Player` model
        Player: (() => {
            return defineComponent(
                world,
                {
                    address: RecsType.BigInt,
                    games: RecsType.NumberArray,
                },
                {
                    metadata: {
                        name: "ok-Player",
                        types: ["ContractAddress", "array"],
                        customTypes: [],
                    },
                }
            );
        })(),
    };
}
